1.事务：满足ACID特性的一组操作，可commit或者rollback
  Atomicity:事务是不可分割的最小单元，事务要么成功提交，要么失败回滚
  Consistency: 所有的数据副本中的数据时完全一致的。
  Isolation：一个事务做的修改，在最终提交前，对其他事务都是不可见的
  Durability: 事务提交后，所做的修改会永久保存，不会丢失
  四个间的关系
 
2.并发一致性问题：原因是并发环境下事务的隔离性很难保证。
  (1)丢失修改 (2)读脏数据  (3)不可重复读  (4)幻影读：范围两次读取结果不同
  解决方案：通过封锁来实现并发控制，保证隔离性。

3.数据库的封锁：
  封锁的粒度：行级锁和表级锁。锁定数据越少，锁争用的可能性越小，系统并发程度越高。
 
4.读写锁
  (1)排它锁，写锁
  (2)共享锁，读锁

5.意向锁：更容易的支持多粒度封锁。当只有读写锁时，要想对表A加X锁，需要检测每一行以及表A的锁，很耗时。
  意向锁在X/S锁的基础上引入了IX/IS锁，都是表锁
  加锁过程：
   (1)一个事务在获得某个数据行对象的S锁之前，必须先获得表的IS锁或IX锁
   (2)一个事务在获得某个数据行对象的X锁之前，必须先获得表的IX锁
  任意IS/IX锁之间兼容，只是表示想要对表加锁。S锁与S锁和IS锁兼容。
  通过引入意向锁，事务T想对表A加X锁，首先检测是否有其他事务对表A加了X/IX/S/IS锁，如果有就表示有其他事务正在
  使用这个表或表中一行，事务T加锁失败。

6.三级封锁协议：
 (1)一级封锁协议：事务T想要修改数据A时必须加X锁，直到事务结束释放锁。可以解决丢失修改的问题，
    不会有两个事务对同一个数据修改，修改就不会覆盖。
 (2)二级封锁协议：一级的基础上，读取数据A时必须加S锁，读取完马上释放，可以解决度脏数据问题。
 (3)三级封锁协议：二级的基础上，读取数据A时必须加S锁，直到事务完成才能释放，可以解决不可重复读的问题。
 
7.两段锁协议：加锁解锁分两个阶段进行。
  可串行化调度：通过并发控制，使得并发执行事务的结果与串行执行的结果相同。
  事务遵循两段锁协议是保证可串行化调度的充分条件
  
8.隔离级别
 (1)未提交读，READ UNCOMMITED, 事务的修改，即使没有提交，其他事务也是可见的
 (2)提交度，READ COMMITTED,一个事务所做的修改在提交之前对其他事务是不可见的
 (3)可重复度，REPEATABLE READ，保证同一个事务中多次读取结果是一样的。
 (4)可串行化，SERIALIZABLE，强制事务串行执行
 
9.多版本并发控制(Multi-Version Concurrency Control, MVCC)：MySQL的InNoDB的存储引擎实现隔离级别的一种具体方式，用于实现提交读和
  可重复读两种隔离级别。
  版本号：递增的一个数字，每开始一个新的事务，系统版本号自动递增，每个事务开始时都会赋予一个版本号
  
10.存储原理：数据表中每行记录后面都保存这两个隐藏的列，用来存于两个版本号：
  (1).创建版本号：创建一个数据行快照时的系统版本号。
  (2).删除版本号：若快照的版本号大于当前事务版本号，标识该快照有效，否则标识快照已经删除
 可重复读的实现：
 Select：多个事务读取的是数据行的的距离现在最近的一个有效快照。一个没有对数据行修改的事务T，T要读取的数据行快照的创建版本号必须小于
     T的版本号，大于或等于T的版本号，则表示该快照是其他事务的最新修改，不能读取。同时快照的删除版本号应该大于T的版本号，小于
	 时表示T执行时数据行快照已经被删除。
	 若事务修改数据行，可以读取事务本身所做的修改。
 Insert：将当前事务版本号作为数据行快照的创建版本号。
 Delete：将当前事务版本号作为数据行的删除版本号。
 Update：将事务版本号作为更新前数据行快照的删除版本号，当前事务版本号作为更新后数据行快照的创建版本号
 
 MVCC读取的是快照数据，即快照读，可以减少加锁的开销。
 当前度：读取最新数据，需要加锁。
 
11. Next-key Locks: InnoDB存储引擎的锁实现，解决幻影读的问题。 MVCC+Next-key Locks解决幻影读。

12.幂等：一个程序或者过程任意多次执行产生的影响结果均与一次执行的结果相同。
  数据库幂等：幂等性是后续多余的调用不会对系统数据的一致性进行破坏。
  数据库操作：select和delete都是幂等的。insert一定不幂等，update可能幂等
  (1)insert幂等：需要系统编码的时候自己考虑幂等。例子：
    凭证系统：保证调用发幂等，防止重复调用
  (2)update幂等：如一个订单支付系统。过程
     根据传入的订单号来查询业务订单并锁定
	 订单状态若果是已经支付就会发起退款
	 如果是待支付状态，修改支付装填，并保存支付订单与支付方式到订单中。