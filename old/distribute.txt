1.分布式锁：
  (1)Redis setNX， RedLock
  (2)Zookeeper：永久节点，有序节点，临时节点。
  步骤：创建锁目录。创建有序临时节点。判断自己节点是不是最小的节点，是则获得锁，
  不是则监控当前节点的前一个节点，直至获得锁。获得锁执行完事务后删除自己的节点。
  优势：创建的是临时节点，回话超时后其他节点可继续获取锁，不会出现死锁问题。
       为获得锁时，只需监控前一个节点，避免的羊群效应。
	   
2.分布式事务：事务操作位于不同节点上，需要保证事务的ACID特性。
  (1)2PC，两阶段提交，引入协调者协调参与者的行为，最终决定是否要真正执行事务。
     准备阶段：协调者向参与者发送事务内容，询问参与者是否执行成功，参与者返回结果。
	 提交阶段：所有事务执行成功，协调者发布提交事务的命令，否则让参与者回滚事务。
	 问题：同步阻塞：参与者等待其他参与者响应时处于阻塞状态，无法进行其他操作。
	       协调者的单点问题。协调者出现问题，参与者将一直等待。
		   数据不一致：只有部分参与者收到commit信息时，只有部分参与者提交事务，引发数据不一致问题。
   
   (2)3PC
    CanCommit：协调者向参与者发送包含事务内容的CanCommit请求，询问是否可以执行事务，等待回复。
	            参与者执行事务，并回复结果。
                若有参与者返回No，协调者发送abort请求	 
	preCommit：所有参与者返回yes，执行事务的提交过程。协调者发送Precommit请求，参与者执行事务操作，发回执行反馈。
	           若有参与者返回No，或者超时，会中断事务。协调者发出abort指令，接受者无论是否接收到abort指令，超时后都会中断事务
    doCommit：所有参与者均返回yes，执行提交，发送doCommit请求，接受者收到请求后，正式执行事务提交，发回反馈。
	          有参与者返回No或者超时：中断事务，向所有参与者发送abort指令，参与者回滚后发回反馈，协调者收到所有反馈后，完成事务中断
			  协调者，参与者出现问题，或者网络出现问题时，参与者在等待超时后，都会执行事务提交。
    优点：降低了阻塞范围，等待超时后协调者或参与者中断事务，避免单点问题。阶段3中如果协调者出现问题，超时后参与者会继续事务提交。
	缺点：协调者或者网络出现问题依然提交可能会导致数据不一致问题。
	
	(3)tcc:事务的提交分为Try-Confirm-Cancel三个阶段。与2PC相似，2PC在跨库的DB层面，TCC本质是一个应用层面的2PC。
	      Try：预留业务资源，数据校验。
		  Confirm：确认执行业务操作。
		  Cancel：取消业务操作。
		  
	  优点：让应用自己定义数据库操作的力度，可以降低锁冲突，提高吞吐量。
	  缺点：对应用的入侵性强，业务逻辑的每个分支都要事先try，confirm，cancel，改造成本高。
	        事先难度大，需要按照网络状态，系统故障等不同的失败原因实现不同的回滚策略，confirm和cancel必须实现幂等。
		 
	
3.分布式系统特性：CAP，一致性(consistency)，可用性(Availability),分区容忍性(Partion Tolerance)
 一致性：所有节点在同一时间的数据完全一致。数据更新后系统从一个一致性状态转到另一个一致性状态。
  (1).强一致性：一个数据更新后，所有用户都能读取最新值，则系统被认为具有强一致性
  (2).弱一致性：能容忍后续的部分或者完全访问不到，则是弱一致性
  (3).最终一致性：经过一段时间后能访问到更新后的数据，则认为是最终一致性
 可用性：系统面对异常时提供正常服务的能力。可用性要求系统提供的服务一直处于可用状态，每个用户的请求在有限的时间返回结果。
 分区容忍性：分布式系统遇到某节点或网络分区故障的时候，仍然能对外提供满足一致性和可用性的服务。
 
 分区容忍性必须满足，为了保证一致性(CP)，不能访问未同步完成的节点，牺牲了可用性。
 为了保证可用性，允许读取所有阶段数据，牺牲了一致性。
 
4.分布式系统的妥协：BASE， 基本可用(Basically Available), 软状态(Soft State),最终一致性(Eventaully Consistent)
  基本可用: 分布式系统出现故障时，保证核心可用，允许损失部分可用性。如降级的页面。
  软状态:  允许系统中的数据存在中间状态，允许系统不同节点的数据副本同步过程存在延时。
  最终一致性: 系统中所有数据副本，经过一段时间同步后，最终能达到一致的状态。
  
5.Paxos：用于达成共识性问题，对多个节点产生的值，算法能保证只选出唯一一个值。
  角色：Proposer, Acceptor, Learner
  阶段：Prepare， Accept，Learn
  有正确性和可终止性

6.Raft：分布式一致性协议，用来竞选主节点。
  节点：Follower， Candidate， Leader，竞选过程略。
  
 数据同步：
   (1)所有客户端修改被传入Leader，修改这时候没有提交。  
   (2)Leader复制修改到所有的Follower，follower进行修改。
   (3)大多数follower修改后，leader提交，同时通知follower提交修改，达成一致，类似两阶段提交