1.满二叉树：深度为k，且节点数是2的k次方-1的二叉树

2.完全二叉树：从左向右一次填充的二叉树。满二叉树一定是完全二叉树。

3.平衡二叉树：非叶子节点最多有两个子节点，非叶子节点的值大于左边节点，小于右边子节点，节点两颗子树高度差不会大于1。
  具体的实现由AVL，红黑树。

4.B树：多叉树的一种，又名平衡多路查找树，对于m叉树
  (1)每个节点最多有m-1个关键字
  (2)根节点最少可以有一个关键字
  (3)非根节点至少有Math.ceil(m/2)-1个关键字
  (4)节点中的关键字按序排列，每个关键字左子树中的所有关键字都小于它，右边相反。
  (5)所有叶子结点位于同一层
 插入：
  (1)根据插入的key值，找到叶子节点插入
  (2)判断key所在的叶子节点的关键字的个数是否是(m-1)若是，进行分裂,否则停止。
  (3)以节点中的关键字中间key将重心分为两个部分，中间key插入父节点(没有则新建)，key的左子树指向左半部分，右子树指向又半部分
     若父节点关键字个数为m-1，继续分裂步骤
 删除：
  (1)删除非叶子节点里的key，去叶子节点找该key的后继key，覆盖当前key，然后删除叶子节点上的后继key。
  (2)若后继key所在的节点数>=Math.ceil(m/2)-1,停止。否则转向3
  (3)若有兄弟节点key的数目大于 math.ceil(m/2)-1，父节点key下移，兄弟节点key上移。否则合并兄弟节点和父节点
  
5.B+树：
  (1).B+树跟B树不同的是B+树非叶子节点不保存关键字记录的指针，只进行索引，使得B+树每个非叶子节点所能保存的关键字数量大大增加
  (2).B+树叶子节点保存了父节点的所有关键字记录的指针，所有数据地址必须到叶子节点才能获得。
  (3).B+树叶子节点关键字从小到大有序排列，叶子节点的左边结尾数据会保存右边节点的开始数据指针。
  (4).m阶B+树内部节点最多有m-1个关键字，叶子节点最多存储m-1调记录。
 优点：
  (1).B+树层级更少。相对于B树，每个叶子节点存储关键字更多，所以层级更少，查找更快。
  (2).B+树查询速度更稳定：关键字数据地址都存放在叶子节点上，每次查询次数一样。
  (3).B+树具有排序功能。所有叶子节点构成了一个有序链表，查询大小区间的时候更方便，数据更紧密，缓存命中率更高。
  (4).全节点遍历更快，只需要遍历叶子节点。
  缺点：如果经常访问的数据离根节点更近时，B树会更快
  参考：https://zhuanlan.zhihu.com/p/27700617
        https://www.cnblogs.com/nullzx/p/8729425.html