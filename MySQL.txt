1.数据结构：B+树
  (1)树的高度更低，查找速度快。
  (2)充分利用磁盘预读特性，将索引的一个节点大小设为页的大小，一次IO载入一个节点。
 
2.索引的优点：
  (1)大大减少了服务器要扫描的数据行数。
  (2)帮助服务器避免进行排序和分组，以及避免创建临时表(临时表在排序和分组过程中创建，B+树索引有序，不需要通过临时表来排序分组)
  (3)将随机IO变成了顺序IO，提高了IO效率。
   索引适用于中型和大型的表。

3.存储引擎：
 InnoDB
 (1)MySQL的默认事务性存储引擎，实现了四种隔离级别，默认是REAPTABLE READ。在REPEATABLE READ基础上， MVCC + Next-key Locking(间隙锁)防止幻影读
 (2)主索引是聚簇索引，索引叶子节点中保存了数据，避免直接读取磁盘，提升了查询性能。
 (3)一些内部优化：从磁盘读取数据时采用可预测性读，自动创建的自适应哈希(加快读操作)，插入缓冲区(加速插入操作)
 (4)支持真正的在线热备份，备份时无需停止数据库服务。
 MyISAM:
 (1)设计简单，数据以紧密格式存储。对于只读数据，或者表比较小，可以容忍修复操作。
 (2)提供了大量特性，压缩表，空间数据索引等。
 (3)不支持事务，不支持行级锁，只能对整张表加锁。表有读取操作是，也可以插入新纪录，成为并发插入。
 (4)可手工或者自动执行检查修复操作，可能会丢失数据。有DELAY_KEY_WRITE选项，修改完成后不会立刻写入磁盘，写到内存中，崩溃时可能会丢失数据。
 比较:
 (1)事务：InnoDB事务性，MyISAM不支持事务。
 (2)并发：MyISAM只支持表级锁，InnoDB还有行级锁选项。
 (3)外键：InnoDB支持。
 (4)备份：InnoDB支持热备份。
 (5)崩溃恢复：MyISAM崩溃后数据损毁概率更高，恢复更慢。
 (6)MyISAM支持压缩表和空间数据索引，提供高速存储和检索，以及全文搜索的能力
 
4.切分：
 水平切分：Sharding，按行切分，将同一个表中的记录拆分到多个结构相同的表中。
 垂直切分：按列切分表，按照列的关系密集程度进行切分。
 Sharding策略：哈希取模，范围(ID范围或者时间范围),映射表(使用单独的一个数据库存储映射关系)
 Sharding存在的问题：事务问题(分布式解决)，连接(将原来的连接分解成多个单表查询),ID唯一性。

5.复制：
  主从复制：
  (1)binlog线程：将主服务器上的数据更改写入二进制日志(Binary log)中。
  (2)I/O线程：负责从主服务器读取二进制文件，写入从服务器中继日志(Relay log)。
  (3)SQL线程：读取中继日志，解析出主服务器已执行的数据更改并在从服务器重放(Relay)。
  
  读写分离：主服务器处理写操作和实时性比较高的读操作，从服务器处理读操作。当更新少，查询多时，考虑使用，优势有：
  (1)主从服务器各自负责读写，缓解了锁争用。
  (2)从服务器可以使用MyISAM，提升查询性能，节约系统开销。
  (3)增加冗余，提高可用性。