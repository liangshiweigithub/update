1.MySQL索引：
(1)B+树的索引：
   搜索时无需全表扫描，对树进行搜索即可，查找速度快
   B+树有序，除了用于查找，还可以用于排序和分组，
   可以指定多个列作为索引列，多个索引列共同组成键
   适用于全键值，键值范围和键前缀查找。键前缀查找只适用于最左前缀查找，如果不是按照索引列的顺序查找，则无法使用索引。
   主索引：主索引的叶子结点data域记录着完整的数据记录，数据库表行中数据的物理顺序与兼职的逻辑顺序相同，
   又称为聚簇索引。一个表只能有一个聚簇索引，因为无法把数据行存在两个地方。
   辅助索引：叶子结点的data域记录着主键的值，使用辅助索引查找时，要先找到主键值，再到主索引中进行查找。
   
(2)哈希索引：以O(1)的时间查找，但是失去了有序性。无法用于排序和分组，只支持精确查找，无法部分查找和范围查找
  InnoDB的自适应哈希：当某个索引值被使用频繁时，会在B+树索引上在创建一个哈希索引，方便快速查找
  
(3)全文索引：用于查找文本关键词，而不是直接比较相等。MyISAM引擎和MySQL都支持

(4)空间数据索引：用于地理数据存储，空间数据索引从所有维度索引数据，可以用任意维度进行组合查询。

2.索引优化
 (1)独立的列：索引不能是表达式，也不能是函数参数，否则无法使用索引。
 (2)多列(组合)索引：使用多个列作为条件查询时，使用多列索引比用多个单列索引好。生效原则是从前往后依次使用生效，如果中间某个索引
    没有使用，那么断点前的索引起作用，断点后的索引没有作用。如a，b，c三列建立了索引：
	select * from mytable where a=3 and c=7 只有a索引起了作用。
 (3)索引列的顺序：让选择性最强的索引放在前面。索引选择性：不重复的索引值和记录总数的比值，最大为1，每个记录都有唯一的索引对应，
    选择性越高，每个记录区分度越高，查询效率越高。
 (4)前缀索引：只索引开始部分字符当列值较长时
 (5)覆盖索引：索引包含所有要查询的字段值。索引远小于数据行大小，只读取索引能大大减少数据访问量，索引在内存中缓存，数据依赖操作系统缓存，
   只访问索引可以减少IO。对InnovationDB，若辅助索引能查，无需主索引。
 
3.索引的优点：
  (1)大大减少了服务器要扫描的数据行数。
  (2)帮助服务器避免进行排序和分组，以及避免创建临时表(临时表在排序和分组过程中创建，B+树索引有序，不需要通过临时表来排序分组)
  (3)将随机IO变成了顺序IO，提高了IO效率。
   索引适用于中型和大型的表。

4.存储引擎：
 InnoDB
 (1)MySQL的默认事务性存储引擎，实现了四种隔离级别，默认是REAPTABLE READ。在REPEATABLE READ基础上， MVCC + Next-key Locking(间隙锁)防止幻影读
 (2)主索引是聚簇索引，索引叶子节点中保存了数据，避免直接读取磁盘，提升了查询性能。
 (3)一些内部优化：从磁盘读取数据时采用可预测性读，自动创建的自适应哈希(加快读操作)，插入缓冲区(加速插入操作)
 (4)支持真正的在线热备份，备份时无需停止数据库服务。
 MyISAM:
 (1)设计简单，数据以紧密格式存储。对于只读数据，或者表比较小，可以容忍修复操作。
 (2)提供了大量特性，压缩表，空间数据索引等。
 (3)不支持事务，不支持行级锁，只能对整张表加锁。表有读取操作是，也可以插入新纪录，成为并发插入。
 (4)可手工或者自动执行检查修复操作，可能会丢失数据。有DELAY_KEY_WRITE选项，修改完成后不会立刻写入磁盘，写到内存中，崩溃时可能会丢失数据。
 比较:
 (1)事务：InnoDB事务性，MyISAM不支持事务。
 (2)并发：MyISAM只支持表级锁，InnoDB还有行级锁选项。
 (3)外键：InnoDB支持。
 (4)备份：InnoDB支持热备份。
 (5)崩溃恢复：MyISAM崩溃后数据损毁概率更高，恢复更慢。
 (6)MyISAM支持压缩表和空间数据索引，提供高速存储和检索，以及全文搜索的能力
 
5.切分：
 水平切分：Sharding，按行切分，将同一个表中的记录拆分到多个结构相同的表中。
 垂直切分：按列切分表，按照列的关系密集程度进行切分。
 Sharding策略：哈希取模，范围(ID范围或者时间范围),映射表(使用单独的一个数据库存储映射关系)
 Sharding存在的问题：事务问题(分布式解决)，连接(将原来的连接分解成多个单表查询),ID唯一性。

6.复制：
  主从复制：
  (1)binlog线程：将主服务器上的数据更改写入二进制日志(Binary log)中。
  (2)I/O线程：负责从主服务器读取二进制文件，写入从服务器中继日志(Relay log)。
  (3)SQL线程：读取中继日志，解析出主服务器已执行的数据更改并在从服务器重放(Relay)。
  
  读写分离：主服务器处理写操作和实时性比较高的读操作，从服务器处理读操作。当更新少，查询多时，考虑使用，优势有：
  (1)主从服务器各自负责读写，缓解了锁争用。
  (2)从服务器可以使用MyISAM，提升查询性能，节约系统开销。
  (3)增加冗余，提高可用性。