接口：

1.抽象方法机制：abstract定义，包含抽象方法的类称为抽象类，类如果包含一个以上的抽象方法，该类必须用abstract方法限定为抽象的。创建
  抽象类的实例会报错，继承抽象类的类必须实现抽象基类中所有的方法。
  
2.接口：产生一个完全的抽象类，不提供任何具体实现。使用时放在class的位置。包含的域只能是static或者final修饰的，继承自接口时需要用implements关键字，
  如class Wind implements Instrument;接口中方法默认是public。
  
3.多重继承：一个类只能有一个非接口的父类，可以有多个接口级的父类。语法：class Hero extends ActionCharactor implements CanFight, CanWin{}。
  子类可向上转型为接口类。使用接口的核心原因是能够向上转型为多个基类型，同时可以防止创建该类的对象(抽象类)。接口可通过继承来扩展，
  interface a extends b {}.接口内方法的名字尽量不同。
  
4.接口的域：自动是static或者final，是一种很便捷的用来创建常量组的工具。名称一般为大写字母的形式。域在初次访问的时候初始化。接口可以嵌套，
  使用A.B访问嵌套的接口。
  
5.接口的设计模式：适配器模式，工厂模式。工厂模式；生成遵循某个接口的对象。使用时优先选择类而不是接口。



                                       内部类：
1.将一个类的定义放在另一个类的定义内部。将逻辑相关的类组织在一起，并控制位于内部的类的可视性。语法：OuterClass.InnerClass。
  内部类对象能访问外围对象的所有成员，不需要任何特殊条件。典型：迭代器的实现。
  
2.内部类对象如果 要生成对外部类对象的引用，格式为：OuterClassName.this。内部类对象的创建必须通过外部对象：
  语法： Inner a = OuterClassInstace.new Inner().

3.内部类继承接口时，通过设置内部类的权限，在将内部类向上转型为接口类的时候，可以隐藏内部的具体实现。在方法和作用域内也可以定义内部类。

4.匿名内部类：语法类型，有参数时的语法，工厂方法的改进版(P233)。


5.嵌套类：静态内部类，无需通过外部对象来创建。普通的内部类对象隐式的保存了一个引用，指向创建它的外围类对象。对于嵌套类，不能从其对象中访问非静态
  的外围类对象。
  
6.使用内部类的原因：每个内部类都能独立的继承自一个接口的实现，所以无论外围类是否已经继承了接口的实现，对内部类都没有影响。内部类允许继承多个非接口
  类型。
  
7.闭包：能够将一个方法作为一个变量去存储，这个方法有能力访问所在类的自由变量。Java闭包实现：内部类+接口，可用来实现回调。

                                  
								容器：
1.容器的类型参数可以有多个，容器类库两种：Collection和Map。Arrays.AsList.

2.HashSet：查找元素最快，TreeSet：升序保存对象，LinkedHashSet：按照添加的顺序保存对象。

3.Map：HashMap：查找最快。TreeMap：升序保存键。LinkedHashMap：按照插入顺序保存键，保留了HashMap的查询速度。put(key,value),get(key)

4.list: ArrayList：类似数组。 LinkedList：类似链表。add,remove,contains,indexOf,subList，isEmplty, clear,toArray，get
        LinkedList:getFirst, element, peek, removeFirst, remove, poll, addFirst, add, addLast, removeLast. 

5.迭代器：基类：Iterator，只能单向移动，next(),hasNext(),remove()
  ListIterator:用于各种list的访问，可双向移动，listIterator(n)创建指向索引为n的元素。hasPrevious(),previouse()
  
6.linkedList：略

7.stack:略

8.Set：唯一性

9.Map：get，put，containsKey，containsValue;

10.Queue:LinkedList实现了Queue的接口，可以将其向上转型为Queue。方法：添加：offer。查询：peek,element,移除：poll,remove.
  PriorityQueue
  

  
								
									异常：
1.语法：throw new ExceptionName(description str)
  try{state;}catch{EXC type){state}finally{state}
  
2.异常说明：告知调用者可能发生的异常，方便调用者处理。语法：void f() throws ExcetionName1,....{}

3.捕获异常的基类Exception来捕获所有的异常。Exception的getMessage()，getLocalizedMessage打印异常的信息，printStackTrace打印调用站
	for(StackTraceElement ste : e.getStackTrace())

4.Throwable这个类用来表示任何可以作为异常被抛出的类。
5.异常匹配时派生类会被匹配为基类


                                    字符串：
1.使用StringBuilder来进行字符串操作，方法有append，toString，insert，delete，replace，substring，reverse。

2.打印内存地址时引起的无限递归调用。解决super.toString()

3.一些方法：length,charAt,getChars,getBytes,toCharArray,equals,equalsIgnoreCase,compareTo,Contains,ContentEquals,
           equalsIgnoreCase,regionMatcher,startsWith,endWith,indexOf,lastIndexOf,substring,concat,replace,toLowerCase,toUppserCase,
		   valueOf,intern
		   
4.格式化输出：format，可用于PrintStream，PrintWriter对象，System.out.format(),使用方法与c中的相似。

5.Formatter类：格式化功能。Formatter f = new Formatter(System.out);f.format("hahs %d hadhh%s",13,lsw)





								类型信息：
								
1.Class对象：含有类型信息，创建该类型的所有对象。每个类都有一个Class对象。Class类对象是在第一次使用时加载到JVM中。
  Class对象被加载后才能创建该类的对象。所有Class对象都属于Class类，Class对象也是对象，可以通过Class.forName取得其引用。
  要在运行时使用类型信息，必须先获得Class对象的引用。也可以通过类实例的getClass方法获得类的Class对象的引用。
  
2.Class.forName参数需要是全限定类名，ClassObj。getSimpleName,getCanonicalName可以获得类的名称和全限定名称。isInterface和getInterface获取接口信息。
  getSuperClass获取基类，Class.newInstace创建一个实例对象，这时类必须有默认构造函数。
  
3.也可使用ClassName.class获取Class对象。这种方式不会引发类的初始化，与Class.ForName不同。同时类的static final如果是编译器常量，也不会初始化。
 非编译器常量会初始化。变量只是static的，在读取值之前，也会进行链接和初始化。总过程是加载，链接，初始化。
 
4.Class对象制造类实例，包含可做用于这些实例的所有方法代码，包含类的静态成员。

5.在使用泛化的Class引用时放松限制，可用通配符。比如 Class<? extends Number> a = int.class. 可用Class.cast进行对象实例的转换。
  if(classInstance instanceof Class)，来判断类型
  
6.Java.lang.reflect支持反射：有Field，Method，Constructor类。Class.getFields,Class.getMethods, Class.getConstructors获得类域，方法，和构造函数
  