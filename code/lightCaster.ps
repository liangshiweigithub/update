#version 330 core
out vec4 FragColor;

struct Material{
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};

struct DirectionalLight{
	vec3 direction;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct PointLight{
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	
	float constant;
	float linear;
	float quadratic;
};

struct SpotLight{
	vec3 position;
	vec3 direction;
	float cutoff;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	
	float constant;
    float linear;
    float quadratic;
};

in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoords;

uniform vec3 viewPos;
uniform Material material;
uniform DirectionalLight directionalLight; 
uniform PointLight pointLight;
uniform SpotLight spotLight;

void PointLighShading()
{
	float distance = length(pointLight.position - FragPos);
	float attenuation = 1.0 / (pointLight.constant + pointLight.linear * distance + pointLight.quadratic * distance * distance);
	
	// ambient
	vec3 ambient = pointLight.ambient * texture(material.diffuse, TexCoords).rgb;
	
	// diffuse
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(pointLight.position - FragPos);
	float diff = max(dot(norm, lightDir), 0);
	vec3 diffuse = pointLight.diffuse * diff * texture(material.diffuse, TexCoords).rgb;
	
	// specular
	vec3 reflectDir = reflect(-lightDir, norm);
	vec3 viewDir = normalize(viewPos - FragPos);
	float spec = pow(max(dot(reflectDir, viewDir), 0), material.shininess);
	vec3 specular = pointLight.specular * (spec * texture(material.specular, TexCoords).rgb);
	
	vec3 result = ambient + (diffuse + specular) * attenuation;
	FragColor = vec4(result, 1.0);
}

void DirectionaLightShading()
{
	// ambient
	vec3 ambient = directionalLight.ambient * texture(material.diffuse, TexCoords).rgb;
	
	// diffuse
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(-directionalLight.direction);
	float diff = dot(lightDir, norm);
	vec3 diffuse = directionalLight.diffuse * (diff * texture(material.diffuse, TexCoords).rgb);
	
	// specular
	vec3 reflectDir = reflect(directionalLight.direction, norm);
	vec3 viewDir = normalize(viewPos - FragPos);
	float spec = pow(max(dot(reflectDir, viewDir), 0), material.shininess);
	vec3 specular = directionalLight.specular * spec * texture(material.specular, TexCoords).rgb;
	
	FragColor = vec4(ambient + diffuse + specular, 1.0);
}


void SpotLightShading()
{
	vec3 lightDir = normalize(spotLight.position - FragPos);
	float theta = dot(lightDir, normalize(-spotLight.direction));
	if(theta > spotLight.cutoff)  // because this is cosin value
	{
		vec3 ambient = spotLight.ambient * texture(material.diffuse, TexCoords).rgb;
		
		// diffuse
		vec3 norm = normalize(Normal);
		float diff = max(dot(lightDir, norm),0);
		vec3 diffuse = spotLight.diffuse * (diff * texture(material.diffuse, TexCoords).rgb);
		
		// specular
		vec3 viewDir = normalize(viewPos - FragPos);
		vec3 reflectDir = reflect(-lightDir, norm);
		float spec = pow(max(dot(reflectDir, viewDir), 0), material.shininess);
		vec3 specular = spotLight.specular * spec * texture(material.specular, TexCoords).rgb;
		
		float distance    = length(spotLight.position - FragPos);
        float attenuation = 1.0 / (spotLight.constant + spotLight.linear * distance + spotLight.quadratic * (distance * distance));    

        // ambient  *= attenuation; // remove attenuation from ambient, as otherwise at large distances the light would be darker inside than outside the spotlight due the ambient term in the else branche
        diffuse *= attenuation;
        specular *= attenuation;  
		
		FragColor = vec4(ambient + diffuse + specular, 1.0);
	}
	else
		FragColor = vec4(spotLight.ambient * vec3(texture(material.diffuse, TexCoords)), 1.0);
}

void main()
{
	SpotLightShading();
}